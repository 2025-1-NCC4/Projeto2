# -*- coding: utf-8 -*-
"""entrega3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VEo6CFrMCcWL4J1TWCyyDlMfe5yDmN_f

###Equipe:

- üîπ Jenifer Barreto

- üîπ Eduarda Lopes

- üîπ Maria Kassandra

- üîπ Fl√°vio Santos
"""

!pip install dash

!pip install -U kaleido

import pandas as pd
dados_df=pd.read_excel('correlacaoIPCA.xlsx')

from dash import dcc, html, Input, Output
import dash
import plotly.express as px
import pandas as pd

# Carrega os dados
dados_df = pd.read_excel("correlacaoIPCA.xlsx")
dados_df.columns = dados_df.columns.str.strip()  # remove espa√ßos extras
dados_df['Date'] = pd.to_datetime(dados_df['Date'])  # garante que Date seja datetime

app = dash.Dash(__name__)

app.layout = html.Div([
    dcc.Dropdown(
        id='variavel-dropdown',
        options=[
            {'label': 'IPCA', 'value': 'IPCA'},
            {'label': 'SELIC', 'value': 'SELIC'},
            {'label': 'Inadimpl√™ncia', 'value': 'Inadimplencia'}
        ],
        value='IPCA'
    ),
    dcc.Graph(id='grafico-variavel')
])

@app.callback(
    Output('grafico-variavel', 'figure'),
    Input('variavel-dropdown', 'value')
)
def update_graph(variavel):

    grouped_data = dados_df.groupby("Date", as_index=False)[variavel].mean() # Agrupa por data e calcula a m√©dia da vari√°vel escolhida

    fig = px.bar(grouped_data, x='Date', y=variavel, title=f'Dados do {variavel}')

    return fig

if __name__ == '__main__':
    app.run(debug=True)

"""Compara√ß√£o de gr√°ficos"""

from dash import dcc, html, Input, Output
import dash
import plotly.express as px
import pandas as pd

# Carrega os dados
dados_df = pd.read_excel("correlacaoIPCA.xlsx")
dados_df.columns = dados_df.columns.str.strip()  # remove espa√ßos extras nos nomes das colunas

app = dash.Dash(__name__)


app.layout = html.Div([   # Layout com apenas um dropdown e gr√°fico
    html.Div([
        dcc.Dropdown(
            id='variavel-economica-dropdown',
            options=[
                {'label': 'IPCA', 'value': 'IPCA'},
                {'label': 'SELIC', 'value': 'SELIC'},
                {'label': 'Inadimplencia', 'value': 'Inadimplencia'}
            ],
            value='IPCA',
            placeholder="Escolha um indicador econ√¥mico"
        )
    ], style={'width': '50%', 'padding': '20px'}),

    html.Div([
        dcc.Graph(id='grafico-indicador-economico')
    ], style={'width': '90%', 'padding': '20px'})
])

# Callback para o gr√°fico
@app.callback(
    Output('grafico-indicador-economico', 'figure'),
    Input('variavel-economica-dropdown', 'value')
)
def update_indicador_economico(variavel):
    grouped_data = dados_df.groupby('Date', as_index=False)[variavel].mean()
    fig = px.line(grouped_data, x='Date', y=variavel,
                  title=f'Evolu√ß√£o de {variavel} ao longo do tempo')
    return fig

if __name__ == '__main__':
    app.run(debug=True)

"""**Gr√°fico de linha com a varia√ß√£o ao longo do tempo**"""

from dash import dcc, html, Input, Output
import dash
import plotly.express as px
import pandas as pd

# Carregar e preparar os dados
df = pd.read_excel("correlacaoIPCA.xlsx")
df.columns = df.columns.str.strip()  # Remover espa√ßos em branco dos nomes das colunas

app = dash.Dash(__name__)

# Layout com dois gr√°ficos
app.layout = html.Div([
    html.H2("Indicadores Econ√¥micos"),

    html.Div([
        dcc.Graph(id='grafico-media-indicadores'),
        dcc.Graph(id='grafico-linha-indicadores')
    ])
])

# Callback para atualizar os dois gr√°ficos
@app.callback(
    Output('grafico-media-indicadores', 'figure'),
    Output('grafico-linha-indicadores', 'figure'),
    Input('grafico-media-indicadores', 'id')  # Trigger de carregamento
)
def atualizar_graficos(_):
    # Gr√°fico de m√©dias
    medias = df[['SELIC', 'IPCA', 'Inadimplencia']].mean().reset_index()
    medias.columns = ['Indicador', 'M√©dia']
    fig_media = px.bar(medias, x='Indicador',  y='M√©dia', title='M√©dia dos Indicadores Econ√¥micos')


    # Gr√°fico de linha temporal
    df['Date'] = pd.to_datetime(df['Date'])
    df_longo = df.melt(id_vars='Date', value_vars=['SELIC', 'IPCA', 'Inadimplencia'],
                       var_name='Indicador', value_name='Valor')
    fig_linha = px.line(df_longo, x='Date', y='Valor', color='Indicador',
                        title='Evolu√ß√£o dos Indicadores Econ√¥micos ao Longo do Tempo')

    return fig_media, fig_linha


if __name__ == '__main__':
    app.run(debug=True)